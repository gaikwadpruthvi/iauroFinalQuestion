// Backend (Node.js with Express.js)

const express = require('express');
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const Expense = require('./models/Expense');
const User = require('./models/User');

const app = express();
app.use(express.json());

// Connect to MongoDB
mongoose.connect('mongodb://localhost/expense-tracker', { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('Connected to MongoDB'))
    .catch(err => console.error('Failed to connect to MongoDB', err));

// Authentication endpoints
app.post('/api/signup', async (req, res) => {
    const { username, password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({ username, password: hashedPassword });
    await user.save();
    res.status(201).send('User created successfully');
});

app.post('/api/login', async (req, res) => {
    const { username, password } = req.body;
    const user = await User.findOne({ username });
    if (!user) return res.status(400).send('Invalid username or password');
    const validPassword = await bcrypt.compare(password, user.password);
    if (!validPassword) return res.status(400).send('Invalid username or password');
    const token = jwt.sign({ _id: user._id, username: user.username }, 'secretkey');
    res.send(token);
});

// Middleware to verify JWT token
function authenticateToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    if (token == null) return res.sendStatus(401);

    jwt.verify(token, 'secretkey', (err, user) => {
        if (err) return res.sendStatus(403);
        req.user = user;
        next();
    });
}

// Expense management endpoints
app.get('/api/expenses', authenticateToken, async (req, res) => {
    const expenses = await Expense.find({ userId: req.user._id }).sort('-createdAt');
    res.send(expenses);
});

app.post('/api/expenses', authenticateToken, async (req, res) => {
    const { category, amount, comments } = req.body;
    const expense = new Expense({ category, amount, comments, userId: req.user._id });
    await expense.save();
    res.status(201).send('Expense added successfully');
});

app.put('/api/expenses/:id', authenticateToken, async (req, res) => {
    const { id } = req.params;
    const { category, amount, comments } = req.body;
    const expense = await Expense.findByIdAndUpdate(id, { category, amount, comments }, { new: true });
    if (!expense) return res.status(404).send('Expense not found');
    res.send('Expense updated successfully');
});

app.delete('/api/expenses/:id', authenticateToken, async (req, res) => {
    const { id } = req.params;
    const expense = await Expense.findByIdAndDelete(id);
    if (!expense) return res.status(404).send('Expense not found');
    res.send('Expense deleted successfully');
});

// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server is running on port ${PORT}`));
